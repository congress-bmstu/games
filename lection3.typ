#import "notes.typ": *
#import "@preview/cetz:0.3.2"
#import "@preview/cetz-plot:0.1.1": *

#show math.lt.eq: math.lt.slant
#show math.gt.eq: math.gt.slant

= Лекция 3

Запишем задачу линейного программирования используя расширенную матрицу:
$
  tilde(A)= limits(mat(
    a_(11), a_(12), ..., a_(1n), <=, b_1;
    a_(21), a_(22), ..., a_(2n), >=, b_2;
    dots.v, dots.v, dots.v, dots.v, ,dots.v;
    a_(m 1), a_(m 2), ..., a_(m n), =, b_m;
    >=,<=,,~,,;
    c_1,c_2,,c_n,,c_0
  ))^mat("    "x_1 "     ", x_2 "   ", ... "     ", x_n,"                  ";delim:#none)->max quad
  dash(A)=limits(mat(
    a_(11), a_(12), ..., a_(1n), >=, c_1;
    a_(21), a_(22), ..., a_(2n), <=, c_2;
    dots.v, dots.v, dots.v, dots.v, ,dots.v;
    a_(m 1), a_(m 2), ..., a_(m n), =, c_n;
    >=,<=,,~,,;
    b_1,b_2,,b_m,,;
  ))^mat("    " y_1 "     ", y_2 "   ", ... "     ", y_n,"                  ";delim:#none)->min
$
Данная запись соответствует задаче $tilde(A)vec(x_1,x_2,dots.v,x_n)lt.gt.eq vec(b_1,b_2,dots.v,b_n), f=sum_(i=1)^n x_i c_i$

Матрица двойственной задачи (числовые значения) получается транспонированием. Столбец неравенств матрицы $dash(A)$ совпадает со строкой неравенств матрицы $tilde(A)$. При этом знак эквивалентности ($~$) переходит в равенство ($=$). Столбец неравенств матрицы $tilde(A)$ переходит в строку неравенств матрицы $dash(A)$ с заменой знака на противоположный.
#let h = box.with(fill: red.lighten(80%), outset: 1pt, radius: 5pt)
#let b = box.with(fill: blue.lighten(80%), outset: 1pt, radius: 5pt)
#let g = box.with(fill: green.lighten(80%), outset: 2pt, radius: 5pt)
$
  tilde(A)=mat(
    , , , , #b[$<=$], ;
    , , , , #b[$>=$], ;
    , , , , ,;
    , , , , #b[$=$], ;
    #h[$>=$],#h[$<=$],,#h[$~$],,;
    ,,,,,
  )#g[$->max$] quad stretch(<=>)^"переход" quad
  dash(A)=mat(
    , , , , #h[$>=$], ;
    , , , , #h[$<=$], ;
    , , , , ,;
    , , , , #h[$=$], ;
    #b[$>=$],#b[$<=$],,#b[$~$],,;
    ,,,,,;
  )#g[$->min$]
$

#example(title: "Переход к двойственной задаче")[
  Исходная задача:
  $
    f=x_1-2x_2+4x_3-4->max, quad cases(
      4x_1-4x_1-x_3<=1,
      x_1-3x_2+2x_3>=-1,
      2x_1+x_2+4x_3=5,
      x_1<=0\,quad x_2>=0
    )
  $
  Запишем в виде матрицы, потом преобразуем её к двойственной:
  $
    tilde(A)=mat(
      4,-4,-1,<=,1;
      1,-3,2,>=,-1;
      2,1,4,=,5;
      <=,>=,~,,,;
      1,-2,4,,-4;
    )->max quad
    <=>
    dash(A)=mat(
      4,1,2,<=,1;
      -4,-3,1,>=,-2;
      -1,2,4,=,4;
      >=,<=,~,,;
      1,-1,5,,-4;
    )->min
  $
  Получили двойственную задачу:
  $
    f^*=y_1-y_2+5y_3-4->min, quad cases(
      4y_1+y_2+2y_3<=1,
      -4y_1-3y_2+y_3>=-2,
      -y_1+2y_2+4y_3=4,
      y_1>=0\, quad y_2<=0
    )
  $
]

#example[
  Исходная задача:
  $
    phi=16y_1+14y_2-6y_3+3->min, quad cases(
      y_1+2y_2-3y_3>=1,
      2y_1+y_2-3y_3>=,
      y_1\,space y_2\,space y_3 >=0
    )
  $
  Запишем в виде матрицы, потом преобразуем её к двойственной:
  $
    dash(A)=mat(
      1,2,-3,>=,1;
      2,1,-1,>=,1;
      >=,>=,>=,,;
      16,14,-6,,3;
    )->min quad <=>
    tilde(A)=mat(
      1,2,<=,16;
      2,1,<=,14;
      -3,-1,<=,-6;
      >=,>=,,;
      1,1,,3;
    )->max
  $
  Получили двойственную задачу:
  $
    f=x_1+x_3+3->max, quad cases(
      x_1+2x_2<=16,
      2x_1+x_2<=14,
      -3x_1-x_2<=-6,
      x_1\,space x_2 >=0
    )
  $
  $ x^*=vec(4,6),quad f^*=13=f_max=phi_min $
  Запишем условия дополняющей нежесткости:
  $
    cases(
      x_1^*(y_1^*+2y_2^*-3y_3^*-1)=0,
      x_2^*(2y_1^*+y_2^*-y_3^*-1)=0
    )
  $<dop_nezh1>
  Для двойственной задачи:
  $
    cases(
      y_1^*(x_1^*+2x_2^*-16)=0,
      y_2^*(2x_1^*+x_2^*-14)=0,
      y_3^*(-3x_1^*-x_2^*+6)=0
    )
  $<dop_nezh2>
  Сократив @dop_nezh1 на $x_1, x_2$, получим:
  $
    =>
    cases(
      y_1^*+2y_2^*-3y_3^*-1=0,
      2y_1^*+y_2^*-y_3^*-1=0
    )
  $<nezh_new1>
  Подставим $x^*=vec(4,6)$ в @dop_nezh2:
  $
    cases(
      y_1^* (0)=0,
      y_2^* (0)=0,
      y_3^* (-12)=0
    )=>y_3^*=0
  $
  подставим $y_3^*=0$ в @nezh_new1:
  $
    cases(
      y_1^*+2y_2^*-1=0,
      2y_1^*+y_2^*-1=0
    )=>cases(
      y_1^*=1/3,
      y_2^*=1/3,
      y_3^*=0
    )
  $
  Для проверки можно подставить $y_i^*$ в $phi$ и получить тот же результат $phi_min=13$.
]

#example(title: "ДЗ №2")[
  $
    f=74x_1+106x_2+20x_3 ->min, quad
    cases(
      -6x_1+10x_2-4x_3>=6,
      -4x_1-2x_2+6x_3>=4,
      x_i>=0\, space i=dash(1\,3)
    )
  $
  Приведём к каноническому виду, добавив (вычитаем т.к. $->max$) балансовые переменные:
  $
    cases(
      -6x_1+10x_2-4x_3-x_4=6,
      -4x_1-2x_2+6x_3-x_5=4,
      x_i>=0\, space i=dash(1\,5)
    )
  $
  Нельзя выделить базисные переменные, тогда введём искусственный базис $y_1, y_2$:
  $
    cases(
      -6x_1+10x_2-4x_3-x_4+y_1=6,
      -4x_1-2x_2+6x_3-x_5+y_2=4,
      x_i>=0\, space i=dash(1\,5)
    ) quad quad F=y_1+y_2->min
  $
  Выразим $F$ через $x_i$:
  $ F-10x_1+8x_2+2x_3-x_4-x_5=10 $
  Симплекс таблица:

  #box(fill: red.lighten(80%), outset: 4pt, "   ") --- выбранный разрешающий столбец

  #box(fill: yellow.lighten(80%), outset: 4pt, "   ") --- элемент, для которого $b_i/a_(i j)=min{b_i / a_(i j)}$

  #box(fill: blue.lighten(70%), outset: 4pt, "   ") --- элемент с которым произведены действия

  #let y = table.cell.with(fill: yellow.lighten(80%))
  #let r = table.cell.with(fill: red.lighten(80%))
  #let b = table.cell.with(fill: blue.lighten(70%))
  #figure(
    table(
      columns: (1.5fr, 1fr, 1fr, 1.5fr, 1.5fr, 1.5fr, 1.5fr, 1.5fr, 1.5fr, 1.5fr, 2.5fr),
      inset: 10pt,
      align: horizon + center,
      fill: (x, y) => if x == 0 or y == 0 {
        gray.lighten(50%)
      } else if calc.rem(y, 4) == 0 or calc.rem(y + 1, 4) == 0 {
        gray.lighten(85%)
      },
      [*Шаг*], [*БН*], [*СЧ*], [$bold(x_1)$], [$bold(x_2)$], [$bold(x_3)$], [$bold(x_4)$], [$bold(x_5)$], [$bold(y_1)$], [$bold(y_2)$], [#text(
          size: 6pt,
        )[*Вычисления*]],
      row-gutter: (0pt, 0pt, 0pt, 0pt, 3pt, 0pt, 0pt, 0pt, 3pt, 0pt),
      column-gutter: (0pt, 0pt, 2.5pt, 0pt),
      table.cell(rowspan: 4)[*1*],
      [$y_1$], [6], [-6], y[10], [-4], [-1], [0], [1], [0], y[$6 / 10=0.6$],
      [$y_2$], [4], [-4], r[-2], [6], [0], [-1], [0], [1], [$<0$],
      [$f$], [0], [-74], r[-106], [-20], [0], [0], [0], [0], [$<0$],
      [$F$], [10], [-10], r[8], [2], [-1], [-1], [0], [0], [],

      table.cell(rowspan: 4)[*2*],
      [$x_2$], [$3 / 5$], [$-3 / 5$], [1], [$-2 / 5$], [$-1 / 10$], [0], b[$1 / 10$], b[0], table.cell(
        rowspan: 4,
      )[#text(
          size: 12pt,
        )[избавляемся от #box(outset: 3pt,height: 1em, radius:5pt, fill: blue.lighten(70%))[$y_i$] потому что ...?]],
      [$y_2$], [$26 / 5$], [$-26 / 5$], [0], [$26 / 5$], [$-1 / 5$], [-1], b[$1 / 5$], b[1],
      [$f$], [$318 / 5$], [$-688 / 5$], [0], [$-312 / 5$], [$-53 / 5$], [0], b[$53 / 5$], b[0],
      [$F$], [$26 / 5$], [$-26 / 5$], [0], [$26 / 5$], [$-1 / 5$], [-1], b[$-4 / 5$], b[0],

      table.cell(rowspan: 4)[*3*],
      [$x_2$], [1], [-1], [1], [0], [$-3 / 26$], [$-1 / 13$], [], [], [],
      [$x_3$], [1], [-1], [0], [1], [$-1 / 26$], [$-5 / 26$], [], [], [],
      [$f$], [126], [-200], [0], [0], [-13], [-12], [], [], [],
      b[$F$], b[0], b[0], b[0], b[0], b[0], b[0], [], [], [убираем т.к. $equiv 0$],
    ),
  )

  $ f^*=f_min=126, quad x^*=vec(0,1,1) $

  Составим двойственную задачу:
  $
    dash(A)=mat(
      -6,10,-4,>=,6;
      -4,-2,6,>=,4;
      >=,>=,>=,,;
      74,106,20,,0;
    )->min quad <=> quad tilde(A)=mat(
      -6,-4,<=,74;
      10,-2,<=,106;
      -4,6,<=,20;
      >=,>=,,;
      6,4,,0;
    )->max
  $
  Запишем в виде системы:
  $
    cases(
      -6y_1-4y_2<=74,
      10y_1-2y_2<=106,
      -4y_1+6y_2<=20,
      y_i>=0\,space i=dash(1\,2)
    ),quad phi=6y_1+4y_2->max,\
    phi_max=f_min=126
  $
  Условия дополняющей нежесткости для двойственной и исходной задачи:
  $
    cases(
    x_1^*(-6y_1^*-4y_2^*-74)=0,
    x_2^*(10y_1^*-2y_2^*-106)=0,
    x_3^*(-4y_1^*+6y_2^*-20)=0
  ) <=>
    cases(
      y_1^*(-6x_1^*+10x_2^*-4x_3^*-6)=0,
      y_2^*(-6x_1^*-2x_2^*+6x_3^*-4)=0,
    )
  $
  Подставив $x^*$ в условия дополняющей нежесткости, получим:
  $
    cases(
      y_1^*(0)=0,
      y_2^*(0)=0,
    ), quad
    cases(
    0=0,
    10y_1^*-y_2^*-106=0,
    -4y_1^*+6y_2^*-20=0
  ) => cases(
    y_1^*=13,
    y_2^*=12
  )=>y^*=vec(13,12)
  $
  Проверка. Подставим $y^*$ в целевую функцию $phi$, получается то же значение $phi_min=126$, что было в исходной задаче $f_min=126$.

  Графический метод. Составим уравнения прямых (для двойственной задачи):
  $
    cases(
      l_1: space y_1/(-74\/6) + y_2/(-74\/4)=1,
      l_2: space y_1/(106\/10) + y_2/(-106\/2)=1,
      l_3: space y_1/(-20\/4) + y_2/(20\/6)=1,
    ) <=>
    cases(
      l_1: space y_1/(-37\/3) + y_2/(-37\/2)=1,
      l_2: space y_1/(53\/5) + y_2/(-53)=1,
      l_3: space y_1/(-5) + y_2/(10\/3)=1,
    )
  $
  Изобразим прямые, см. @pic. Максимум лежит на границе допустимой области.
  #figure(
    cetz.canvas(
      {
        import cetz.draw: *
        set-style(
          axes: (
            stroke: (thickness: .5pt, dash: none, paint: auto),
            tick: (stroke: .5pt),
          ),
          legend: (stroke: none, orientation: ttb, item: (spacing: .1), scale: 5%),
        )
        let domain = (-20, 20)
        // set-style(mark: (symbol: ">"))
        plot.plot(
          name: "plot",
          axis-style: "school-book",
          x-min: -13,
          x-max: 15,
          y-min: -30,
          y-max: 15,
          y-tick-step: 2,
          x-tick-step: 2,
          x-label: $x_1$,
          y-label: $x_2$,
          {
            plot.add(x => (1 - x / (-37 / 3)) * (-37 / 2), domain: domain, label: $l_1$)
            plot.add(x => (1 - x / (53 / 5)) * (-53), domain: domain, label: $l_2$)
            plot.add(x => (1 - x / (-5)) * (10 / 3), domain: domain, label: $l_3$)
            plot.add-fill-between(
              x => calc.max(
                ((1 - x / (-37 / 3)) * (-37 / 2)),
                ((1 - x / (53 / 5)) * (-53)),
              ),
              x => ((1 - x / (-5)) * (10 / 3)),
              domain: (-10, 13),
              style: (fill: gray.lighten(70%), stroke: none),
              label: "Допустимая\nобласть",
            )
            plot.add(x => (4 / 6) * x, domain: (0, 6), label: $"grad" f$)
            plot.add-contour(
              (x, y) => { 6 * x + 4 * y },
              x-domain: (-50, 40),
              y-domain: (-50, 40),
              fill: false,
              style: (stroke: purple),
              op: "<",
              z: (126, 75, 50, 5, -40),
              label: [Линии уровня],
            )
          },
        )
      },
      length: 60%,
    ),
    caption: "Допустимая область",
  )<pic>
]

== Вспоминаем теорию игр

#example[
  Игрок А прячет фишку достоинством 10 или 20 рублей. Игрок Б отгадывает, какая фишка была спрятана. Если он называет правильный результат, то получает её в качестве выигрышка. Если ошибается, то платит 15 рублей. Составить платёжную матрицу и решить задачу.
  #remark_[
    Решить задачу $equiv$ найти оптимальную стратегию. Если оптимальную стратегию не удается найти, то используются смешанные стратегии (игрок чередует использование нескольких стратегий).
  ]
  #smallcaps[Решение.]

  Обозначим:
  + A1 --- прячет 10 рублей;
  + A2 --- прячет 20 рублей;
  + B1 --- угадывает 10 рублей;
  + B2 --- угадывает 20 рублей.
  #let y = table.cell.with(fill: yellow.lighten(80%))
  #let r = table.cell.with(fill: red.lighten(80%))
  #let b = table.cell.with(fill: blue.lighten(70%))
  #figure(
    table(
      columns: 5,
      [], [B1], [B2], [min], [вероятность],
      [A1], [-10], [15], r[-10], [$p_1$],
      [A2], [15], [-20], [-20], [$p_2$],
      [max], [15], [15], [], [],
      [вероятность], [$q_1$], [$q_2$], [], [],
    ),
  )
  Проверим, есть ли седловая точка. Посчитаем минимумы по строчкам (выигрыши Б), максимумы по столбцам (выигрыши А). Среди них нет равных, следовательно седловой точки нет.
  #definition(title: "Седловая точка")[
    #set list(marker: text(baseline: -0.25em)[#emoji.pin])
    - $max_i min_j a_(i j) = alpha$ --- нижняя цена игры.
    - $min_j max_i a_(i j) = beta$ --- верхняя цена игры.
    Седловая точка существует, если $alpha=beta$.
  ]

  $V$ --- средний выигрыш, $p_i$ --- вероятность выбора стратегии A$i$. Запишем систему вероятностей для каждого исхода:
  $
    cases(
      -10p_1+15p_2=V,
      15p_1-20p_2=V,
      p_1+p_2=1
    ) <=> cases(
      -10q_1+15q_2=V,
      15q_1-20q_2=V,
      q_1+q_2=1
    )
  $

  Решим первую и вторую систему:
  $ (V,p_1,p_2)=(5 / 12, space 7 / 12, space 5 / 12), quad (V,q_1,q_2)=(5 / 12, space 7 / 12, space 5 / 12) $

  Это значит, что оптимальная стратегия для игрока А --- смешанная. Ему необходимо выбирать стратегию А1 с вероятностью $7/12$, а стратегию А2 с вероятностью $5/12$.

  #qed()
]

#example[
  Предприятие выпускает 3 вида продукции I, II, III, спрос на которые определяется тремя возможными состояниями G1, G2, G3. Прибыль, получаемая при продаже продукции вида $i$ и спросе $j$, задана матрицей $C_(i j)$. Найти оптимальный план выпуска продукции в процентах, гарантирующий среднюю прибыль при любом состоянии спроса.
  $
    C = mat(
      52,40,22;
      25,50,49;
      30,25,15;
    ) quad dash(C) = mat(
      52,40,22;
      25,50,25;
      30,25,15;
    )
  $

  #smallcaps[Решение.]
  #let r = table.cell.with(fill: red.lighten(80%))
  #figure(
    table(
      columns: 5,
      inset: 8pt,
      [$dash(C)$], [], [], [], [min],
      [], [52], [40], [22], [22],
      [], [25], [50], [25], r[25],
      [], [30], [25], [15], [15],
      [max], [52], [50], r[25], [],
    ),
    caption: [Есть седловая точка, нет чистой стратегии],
  )
  #figure(
    table(
      columns: 6,
      inset: 8pt,
      [$C$], [], [], [], [min], [$p_i$],
      [], [52], [40], [22], [22], [],
      [], [25], [50], [49], r[25], [],
      [], [30], [25], [15], [15], [$p_3=0$],
      [max], [52], [50], r[49], [], [],
      [$q_i$], [], [$q_2=0$], [], [], [],
    ),
    caption: [Есть чистая стратегия],
  )<ex_before>
  #definition(title: "Принцип доминирования")[
    Когда все стратегии одного игрока лучше чем все стратегии другого.
  ]
  #figure(
    table(
      columns: 5,
      inset: 8pt,
      [$C$], [], [], [min], [$p_i$],
      [], [52], [22], [22], [],
      [], [25], [49], r[25], [],
      [max], [52], r[49], [], [],
      [$q_i$], [], [], [], [],
    ),
    caption: [Вычеркнули из @ex_before 3 строку и 2 столбец исходя из принципа доминирования],
  )
  Составим систему:
  $
    cases(
      52p_1+25p_2=V,
      22p_1+49p_2=V,
      p_1+p_2=1
    )=>cases(
      p_1=4/9,
      p_2=5/9,
      V=37
    )
  $

  $
    cases(
      52q_1+22q_3=V,
      25q_1+49q_3=V,
      q_1+q_3=1
    )=>cases(
      q_1=1/2,
      q_2=1/2,
      V=37
    )
  $

  $ p^*=vec(4/9,5/9,0)=vec(44%,56%,0%) $

  Первый вид продукции 44% от общего объема выпуска, второй вид 56%, третий 0%.
  #let y = table.cell.with(fill: yellow.lighten(85%))
  #let r = table.cell.with(fill: red.lighten(85%))
  #let b = table.cell.with(fill: blue.lighten(90%))
  #figure(
    table(
      columns: 5,
      inset: 8pt,
      [$C$], [], [], [], [],
      [], r[52], y[40], b[22], r[$52p_1+25p_2+30p_3>=V$],
      [], r[25], y[50], b[49], y[$40p_1+50p_2+25p_3>=V$],
      [], r[30], y[25], b[15], b[$22p_1+25p_2+15p_3>=V$],
      [], [], [], [], [$p_1+p_2+p_3=1$],
    ),
  )
  Обозначим $display(p_i/V) = x_i$, тогда:
  $
    cases(
       52x_1+25x_2+30x_3>=1,
       40x_1+50x_2+25x_3>=1,
       22x_1+25x_2+15x_3>=1,
       x_1+x_2+x_3=1/V->min#footnote[Хотим увеличить среднюю цену (выигрыш), то есть: $V->max space <=> space display(1/V)->min$]
    )
  $
  Двойственная задача:
  $
    cases(
      52y_1+40y_2+22y_3<=1,
      25y_1+50y_2+49y_3<=1,
      30y_1+25y_2+15y_3<=1,
      y_1+y_2+y_3=1/V->max
    )
  $
]
